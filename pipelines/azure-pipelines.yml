name: '$(Date:yyyyMMdd)$(Rev:.r)-$(BuildID)'
trigger:
  - master

variables:
  - name: GRADLE_USER_HOME
    value: $(Pipeline.Workspace)/.gradle
  - name: BUILD_ID
    value: $(Build.BuildId)
  - name: GRADLE_JVM_OPTIONS
    value: '-Xmx4000m'
  - name: GRADLE_OPTIONS
    value: '--build-cache'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: Build
        steps:
          - checkout: self
            clean: true
          - task: Cache@2
            displayName: Cache
            inputs:
              key: gradle | "$(Agent.OS)"
              path: $(GRADLE_USER_HOME)
              cacheHitVar: gradle
          - task: Gradle@2
            displayName: Enforce formatting
            inputs:
              gradleOptions: $(GRADLE_JVM_OPTIONS)
              options: $(GRADLE_OPTIONS)
              publishJUnitResults: false
              tasks: spotlessCheck
          - task: Gradle@2
            displayName: Build and test
            inputs:
              gradleWrapperFile: gradlew
              options: $(GRADLE_OPTIONS)
              tasks: 'app:assemDevDebug app:assemDevDebugAndroidTest testDevDebug app:lintDevDebug'
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml'
              testRunTitle: Unit tests
              jdkVersionOption: '1.11'
              gradleOptions: $(GRADLE_JVM_OPTIONS)
              sonarQubeRunAnalysis: false
          - task: DownloadSecureFile@1
            displayName: Download Firebase credentials
            name: firebaseCredentials
            inputs:
              secureFile: firebase-credentials.json
          - bash: |
              echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(firebaseCredentials.secureFilePath)"
            displayName: Set Firebase credentials
          - task: Gradle@2
            displayName: Run instrumentation tests
            inputs:
              gradleWrapperFile: gradlew
              options: $(GRADLE_OPTIONS)
              tasks: 'app:runFlank'
              publishJUnitResults: true
              testResultsFiles: '**/fladle/results/**/JUnitReport.xml'
              testRunTitle: Instrumentation tests
              jdkVersionOption: '1.11'
              gradleOptions: $(GRADLE_JVM_OPTIONS)
              sonarQubeRunAnalysis: false
          # Run this step only on master
          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            - template: distribute.yml